{"version":3,"sources":["queries/queries.js","components/ProductDetails.js","components/ProductList.js","components/AddProduct.js","App.js","index.js"],"names":["getProductsQuery","gql","addProductQuery","getImpressionsQuery","ProductDetails","displayImpressions","product","props","data","Fragment","className","name","impressions","map","item","key","id","date","length","this","Component","graphql","options","variables","productId","ProductList","state","selected","displayProducts","loading","products","onClick","e","setState","AddProduct","submitForm","preventDefault","slice","refetchQueries","query","onSubmit","bind","type","onChange","target","value","compose","App","client","ApolloClient","uri","ReactDOM","render","document","getElementById"],"mappings":"4kCAEA,IAAMA,EAAmBC,YAAH,KAShBC,EAAkBD,YAAH,KASfE,EAAsBF,YAAH,KCdnBG,GD0BqBH,YAAH,K,2MCxBpBI,mBAAqB,WAAO,IAChBC,EAAY,EAAKC,MAAMC,KAAvBF,QAER,OAAIA,EAEI,kBAAC,IAAMG,SAAP,KACI,wBAAIC,UAAU,oBAAoBJ,EAAQK,MAC1C,uBAAGD,UAAU,gCAAb,2CACA,wBAAIA,UAAU,wBAENJ,EAAQM,YAAYC,KAAI,SAAAC,GACpB,OAAO,wBAAIC,IAAKD,EAAKE,GAAIN,UAAU,iBAAiBI,EAAKG,UAIrE,yBAAKP,UAAU,2BACX,iDACA,+CAEJ,yBAAKA,UAAU,kBAAkBJ,EAAQM,YAAYM,SAKzD,uBAAGR,UAAU,uBAAb,kC,wEAMR,OACI,yBAAKA,UAAU,WACVS,KAAKd,0B,GAlCOe,cAwCdC,cAAQlB,EAAqB,CACxCmB,QAAS,SAACf,GACN,MAAO,CACHgB,UAAW,CACPP,GAAIT,EAAMiB,cAJXH,CAQZjB,GC7CGqB,E,2MACFC,MAAQ,CACJC,SAAU,M,EAGdC,gBAAkB,WACd,IAAIpB,EAAO,EAAKD,MAAMC,KACtB,OAAIA,EAAKqB,QACG,oDAEDrB,EAAKsB,SAASjB,KAAI,SAAAP,GACrB,OACI,wBACIS,IAAKT,EAAQU,GACbe,QAAS,SAACC,GAAO,EAAKC,SAAS,CAACN,SAAUrB,EAAQU,MAClDN,UAAWJ,EAAQU,KAAO,EAAKU,MAAMC,SAAW,qBAAuB,cAErErB,EAAQK,U,wEAQ1B,OACI,yBAAKD,UAAU,QACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,iBAAd,4BACA,wBAAIA,UAAU,cACTS,KAAKS,oBAG1B,kBAAC,EAAD,CAAgBJ,UAAWL,KAAKO,MAAMC,gB,GAjChBP,aAuCXC,cAAQrB,EAARqB,CAA0BI,G,QCzCnCS,E,2MACFR,MAAQ,CACJf,KAAM,M,EAGVwB,WAAa,SAACH,GACVA,EAAEI,iBAEqB,MAAnB,EAAKV,MAAMf,MAAoC,KAApB,EAAKe,MAAMf,MAGH,MAA/B,EAAKe,MAAMf,KAAK0B,MAAM,EAAE,IAGxB,EAAK9B,MAAML,gBAAgB,CACvBqB,UAAW,CACPZ,KAAM,EAAKe,MAAMf,MAErB2B,eAAgB,CAAC,CAAEC,MAAOvC,O,wEAMhC,IAAD,OACL,OACI,yBAAKU,UAAU,OACX,wBAAIA,UAAU,gBAAd,yBACA,0BAAMA,UAAU,YAAY8B,SAAUrB,KAAKgB,WAAWM,KAAKtB,OACvD,2BAAOT,UAAU,qBAAjB,SACA,2BAAOA,UAAU,YAAYgC,KAAK,OAAOC,SAAU,SAACX,GAAD,OAAO,EAAKC,SAAS,CAAEtB,KAAMqB,EAAEY,OAAOC,WACzF,4BAAQnC,UAAU,eAAlB,W,GA/BKU,aAsCV0B,sBACXzB,YAAQnB,EAAiB,CAAES,KAAM,oBACjCU,YAAQrB,EAAkB,CAAEW,KAAM,qBAFvBmC,CAGbZ,GCxCmBa,E,iLAGnB,OACC,yBAAKrC,UAAU,QACd,wBAAIA,UAAU,iBAAd,sBACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GAR6BU,a,OCD3B4B,EAAS,IAAIC,IAAa,CAC/BC,IAAK,4DAGNC,IAASC,OACL,kBAAC,IAAD,CAAgBJ,OAAQA,GAAQ,kBAAC,EAAD,OAC9BK,SAASC,eAAe,W","file":"static/js/main.365d288f.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getProductsQuery = gql`\n    {\n        products {\n            id\n            name\n        }\n    }\n`\n\nconst addProductQuery = gql`\n    mutation($name: String!) {\n            addProduct(name: $name) {\n                name\n                id\n        }\n    }\n`\n\nconst getImpressionsQuery = gql`\n    query($id: ID) {\n        product(id: $id) {\n            name\n            impressions {\n                id\n                date\n            }\n        }\n    }\n`\n\nconst addImpressionQuery = gql`\n    mutation($date: String!, $productId: String!) {\n        addImpression(date: $date, productId: $productId) {\n            date\n            id\n        }\n    }\n`\n\nexport { getProductsQuery, addProductQuery, getImpressionsQuery, addImpressionQuery };","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\n\n// Queries\nimport { getImpressionsQuery } from '../queries/queries';\n\nclass ProductDetails extends Component {\n\n    displayImpressions = () => {\n        const { product } = this.props.data;\n\n        if (product) {\n            return(\n                <React.Fragment>\n                    <h3 className=\"details__heading\">{product.name}</h3>\n                    <p className=\"details__impressions-heading\">All impressions by this pressure point:</p>\n                    <ul className=\"details__impressions\">\n                        {\n                            product.impressions.map(item => {\n                                return <li key={item.id} className=\"details__item\">{item.date}</li>\n                            })\n                        }\n                    </ul>\n                    <div className=\"details__total-headings\">\n                        <p>Total Impressions:</p>\n                        <p>(since January)</p>\n                    </div>\n                    <div className=\"details__total\">{product.impressions.length}</div>\n                </React.Fragment>\n            )\n        } else {\n            return(\n                <p className=\"details__unselected\">No Pressure Point selected...</p>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"details\">\n                {this.displayImpressions()}\n            </div>\n        )\n    }\n}\n\nexport default graphql(getImpressionsQuery, {\n    options: (props) => {\n        return {\n            variables: {\n                id: props.productId\n            }\n        }\n    }\n})(ProductDetails);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\n\n// Components\nimport ProductDetails from './ProductDetails';\n\n// Queries\nimport { getProductsQuery } from '../queries/queries';\n\nclass ProductList extends Component {\n    state = {\n        selected: null,\n    }\n\n    displayProducts = () => {\n        let data = this.props.data;\n        if (data.loading) {\n            return( <div>Loading products...</div>);\n        } else {\n            return data.products.map(product => {\n                return (\n                    <li\n                        key={product.id}\n                        onClick={(e) => {this.setState({selected: product.id})}}\n                        className={product.id === this.state.selected ? \"list__item--active\" : \"list__item\"}\n                    >\n                        { product.name }\n                    </li>\n                )\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"list\">\n                <div className=\"list__container\">\n                    <h3 className=\"list__heading\">Select a Pressure Point:</h3>\n                    <ul className=\"list__list\">\n                        {this.displayProducts()}\n                    </ul>\n                </div>\n\t\t\t\t<ProductDetails productId={this.state.selected} />\n            </div>\n        )\n    }\n}\n\nexport default graphql(getProductsQuery)(ProductList);","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight as compose } from 'lodash';\n\n// Queries\nimport { addProductQuery, getProductsQuery } from '../queries/queries';\n\nclass AddProduct extends Component {\n    state = {\n        name: null,\n    }\n\n    submitForm = (e) => {\n        e.preventDefault();\n        \n        if (this.state.name == null || this.state.name === \"\") {\n            return;\n        } else {\n            if (this.state.name.slice(0,1) === \" \") {\n                return;\n            } else {\n                this.props.addProductQuery({\n                    variables: {\n                        name: this.state.name,\n                    },\n                    refetchQueries: [{ query: getProductsQuery }]\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"add\">\n                <h3 className=\"add__heading\">Add a Pressure Point:</h3>\n                <form className=\"add__form\" onSubmit={this.submitForm.bind(this)}>\n                    <label className=\"add__name-heading\">Name:</label>\n                    <input className=\"add__name\" type=\"text\" onChange={(e) => this.setState({ name: e.target.value })} />\n                    <button className=\"add__button\">+</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default compose(\n    graphql(addProductQuery, { name: \"addProductQuery\"}),\n    graphql(getProductsQuery, { name: \"getProductsQuery\"})\n)(AddProduct);","import React, { Component } from 'react';\nimport './App.scss';\n\n// Components\nimport ProductList from './components/ProductList';\nimport AddProduct from './components/AddProduct';\n// import TestProducts from './components/TestProducts';\n\nexport default class App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"main\">\n\t\t\t\t<h1 className=\"main__heading\">StudioME Analytics</h1>\n\t\t\t\t<ProductList />\n\t\t\t\t{/* <TestProducts /> */}\n\t\t\t\t<AddProduct />\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n\n// Apollo client setup\nconst client = new ApolloClient({\n\turi: 'https://studiome-analytics-server.herokuapp.com/graphql',\n})\n\nReactDOM.render(\n    <ApolloProvider client={client}><App /></ApolloProvider>\n    , document.getElementById('root'));"],"sourceRoot":""}